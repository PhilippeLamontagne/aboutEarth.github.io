# <!-- script type="text/python" -->
from browser import document, window, aio
import time
import math
from datetime import datetime
import json
from browser import html
from browser import timer, aio
from browser.timer import request_animation_frame as raf
from browser.timer import cancel_animation_frame as caf

# 'importing' the Javascript libraries
Bokeh = window.Bokeh
plt = Bokeh.Plotting
leaflet = window.L
map = window.map

copyleft = {
    "maxZoom": 18,
    "attribution": 'Map data &copy; ' \
    '<a href="https://www.openstreetmap.org/">OpenStreetMap</a>' \
    ' contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>'
}

pageNum=0
pageSize=24

def updateMap(ev):
    global map
    
    sel = document["pageOfStations"]
    csvText = document["csv"].value
    featuredStations = [option.value for option in sel if option.selected and (int(option.value)>=0)]
    lines = [line for line in csvText.split("\n") if any([line.startswith(t+",") for t in featuredStations])]
    for id in featuredStations:
        reports= [ line.split(",") for line in lines if line.startswith(id+",")] 
        fields = [ report for report in reports if all([len(f)>0 for f in report])]
        if len(fields)>0:
            fields=fields[-1]
            latlonalt = [ float(fields[-2]), float(fields[-1]) ]
            map.setView(latlonalt) # optional third list element is altitude           
        else:
            window.alert("Incomplete data from station")

async def refreshPageSize():
    global pageSize,pageNum
    geoJSON = {}
    url2CanadianWeather = "https://geo.weather.gc.ca/geomet/features/collections/climate-stations/items?f=json&limit=10000&sortby=LONGITUDE%3AD%2CLATITUDE%3AA&startindex=0&COUNTRY=CAN&HAS_MONTHLY_SUMMARY=Y"

    request = await aio.get(url2CanadianWeather)#,format="application/json")
    document["nextpage"].disabled=True
    document["formerpage"].disabled=True
    sel = html.SELECT(size=1, multiple=False)
    item = ("Select a station:")
    option = html.OPTION(item)
    option.value = "-1"
    sel <= option
    csvText = ""
    try:
        geoJSON = json.loads(request.data)
        window.updateGeoJSON(json.dumps(geoJSON))   
        entries = len(geoJSON["features"])
        if entries>0:
            pages =  (entries+pageSize-1)//pageSize # double-slash is integer division
            holdPageNum = pageNum
            if (holdPageNum>=pages) or (holdPageNum<0):
                holdPageNum = pages-1
            else:
                document["nextpage"].disabled=False
            
            if holdPageNum>0:
                document["formerpage"].disabled=False

            chosen = choice = pageSize*holdPageNum

            language = "_en"
            for feature in geoJSON["features"][choice:choice+pageSize]:
                type = feature["type"]
                geometry = feature["geometry"]
                lonlat = [float(v) for v in geometry["coordinates"]]
                properties = feature["properties"]
                station = properties["STATION_NAME"]
                item = ("Station #%i: %s %05.2f N %06.2f W"%(chosen,station,lonlat[1],-lonlat[0])) 
                option = html.OPTION(item)
                option.value = "%i"%chosen
                sel <= option
                csvText += ",".join([
                    "%i"%chosen,
                    "%i"%properties.get("STN_ID", 0),
                    station,
                    geoJSON["timeStamp"], 
                    "%f"%lonlat[1],
                    "%f"%lonlat[0]
                ])
                csvText += "\n"
                chosen += 1
    except:
        pass
        
    document["csv"].value=csvText
    if "pageOfStations" in document:
        document["pageOfStations"].remove()
    sel.id=sel.name="pageOfStations"
    sel.bind("change", updateMap)
    document["stations"] <= sel

def updatePageSize(ev):
    global pageSize,pageNum
    pageSize = int(ev.target.value)
    aio.run(refreshPageSize())

def nextPage(ev):
    global pageSize,pageNum
    myPageNum = pageNum
    if pageSize>0 and "pageOfStations" in document:
        sel = document["pageOfStations"]
        myPageNum = int(min([int(option.value) for option in sel if (int(option.value)>=0)])/pageSize)

    pageNum = myPageNum + 1
    aio.run(refreshPageSize())

def formerPage(ev):
    global pageSize,pageNum
    myPageNum = pageNum
    if pageSize>0 and "pageOfStations" in document:
        sel = document["pageOfStations"]
        myPageNum = int(min([int(option.value) for option in sel if (int(option.value)>=0)])/pageSize)
    
    if myPageNum>0:
        pageNum = myPageNum - 1
        aio.run(refreshPageSize())

def firstPage(ev):
    global pageSize,pageNum
    pageNum = 0
    aio.run(refreshPageSize())

def lastPage(ev):
    global pageSize,pageNum
    pageNum = -1
    aio.run(refreshPageSize())

document["pagesize"].bind("change", updatePageSize)
document["nextpage"].bind("click", nextPage)
document["formerpage"].bind("click", formerPage)
document["firstpage"].bind("click", firstPage)
document["lastpage"].bind("click", lastPage)

async def updateTicker():    
    sel = document["pageOfStations"]
    csvText = document["csv"].value
    featuredStations = [option.value for option in sel if option.selected and (int(option.value)>=0)]
    lines = [line for line in csvText.split("\n") if len(line)>0 ]
    reports= [line.split(",") for line in lines for id in featuredStations if line.startswith( "%i,"%(int(id)) )] 
    #records = [ report for report in reports if all([len(f)>0 for f in report])]
    datasets = []
    if True:#len(records)>0:
        #fields=records[-1]
        #latllonalt = [float(fields[-2]), 360.0+float(fields[-1]),0.0] 
        sel = document["pageOfDatasets"]
        featuredDatasets = [option.value for option in sel if option.selected and (option.value!="blank")]
        for dataset in featuredDatasets:
            #request = await aio.get("https://www.ncei.noaa.gov/erddap/info/%s/index.json"%dataset)
            try:
                #geoJSON = json.loads(request.data)
                datasets += [dataset]
            except:
                pass
    document["ticker"].value="\n".join(featuredStations+datasets+[repr(report) for report in reports])
    
async def updateDatasets():
    geoJSON = {}
    
    request = await aio.get("https://www.ncei.noaa.gov/erddap/categorize/institution/index.json?page=1&itemsPerPage=50")

    institutions=[]
    try:
        geoJSON = json.loads(request.data)
        table=geoJSON["table"]
        institutions += [row[0] for row in table["rows"] if len(row)>0]
    except:
        pass
        
    rows=[]
    for institution in institutions:
        request = await aio.get("https://www.ncei.noaa.gov/erddap/categorize/institution/%s/index.json?page=1&itemsPerPage=50"%institution)
        try:
            geoJSON = json.loads(request.data)
            table=geoJSON["table"]
            rows += [row for row in table["rows"] if row[0].endswith("_by_time_lat_lon")]
        except:
            pass
            
    sel = html.SELECT(size=1, multiple=False)
    item = ("Select datasets:")
    option = html.OPTION(item)
    option.value = "blank"
    sel <= option
    chosen = 0
    for row in rows:
        dataset = row[-1]
        option = html.OPTION(dataset)
        option.value = dataset
        sel <= option
        chosen += 1
    if "pageOfDatasets" in document:
        document["pageOfDatasets"].remove()
    sel.id=sel.name="pageOfDatasets"
    document["datasets"] <= sel

stationsPending=False;
datasetsPending=False;
datasetPending=False;
def Every5s():
    global stationsPending;
    global datasetsPending;
    global datasetPending;
    if ("pageOfStations" in document):
        stationsPending=False
    elif not stationsPending:
        stationsPending=True
        aio.run(refreshPageSize())
    if ("pageOfDatasets" in document):
        datasetsPending=False
        if document["ticker"].value!="":
            if not datasetPending:
                document["ticker"].value=""
            datasetPending=False
        elif not datasetPending:
            datasetPending=True;
            #document["ticker"].value="Cannot update Ticker"
            aio.run(updateTicker())
    elif not datasetsPending:
        datasetsPending=True
        aio.run(updateDatasets())            
    timer.set_timeout(Every5s, 5000)

Every5s()
timer.set_timeout(Every5s, 5000)

#animation/timed updates
# ##############################
# paramters of graph
theta0 = 0.0
falseTheta = 0 
nx = 2
colours = ["#666699","yellow"] 
sources = [ Bokeh.ColumnDataSource.new({
    'data': {'x': list(range(nx+1)), 'y': [0.0]*(nx+1) }
}) for _ in colours ]

# ##############################
## Graphing component (TODO: put in separate module)
stopRequested = False
timerInstances = 0
counter = datetime.now()
id = None

def resetGraph():
    global nx
    nx = 1 #timed functions will detect nx=1 and reset data accordingly

def UpdateTheta0(delta):
    global theta0,falseTheta
    #    
    delta = delta % 360.0 #make sure delta is positive and modulo 360
    if falseTheta == 0:
        theta0 += delta
    else:
        theta0 -= delta
    #fi
    if theta0>360.0:
        theta0 = 360.0 - (theta0%360.0)
        falseTheta = 360
    if theta0<0.0:
        theta0 = - (theta0%-360.0)
        falseTheta = 0
    #fi
    return ((360.0 - theta0) if falseTheta else theta0)
    
# create some ranges for the plot
xdr = Bokeh.Range1d.new({ "start": 0, "end": nx });
ydr = Bokeh.Range1d.new({ "start": -10.01, "end": 10.01 });
rdr = Bokeh.Range1d.new({ "start": -360.0, "end": 360.0 });

# make the plot and add some tools
tools = "save" #"pan,zoom_in,zoom_out,reset"
fig1 = plt.figure({'title': "Sine wave (1 RPM)", 'tools': tools, 'height': 300})

fig1.x_range=xdr
fig1.y_range=ydr
fig1.extra_y_ranges["direction"]=rdr
yra = Bokeh.LinearAxis.new({"y_range_name":"direction"})
yra.axis_line_color="yellow"
yra.visible = False
fig1.add_layout(yra, 'right')

lines = [fig1.line({"x": {"field" : "x"}, "y": {"field": "y"}, "source" : source,
    "line_width": 2,
    "line_color": colour,
    "line_dash" : []
}) for source,colour in zip(sources,colours)]
lines[-1].y_range_name=("direction") 
lines[-1].visible = False

def updateDataRanges(ev):
    sel = document["field"]
    fieldIds = [option.value for option in sel if option.selected]
    if any(fieldIds):
        if fieldIds[-1]=="T":  
            ydr["start"]=-50.0
            ydr["end"]=50.0
            yra.visible = False
            lines[-1].visible = False
        elif fieldIds[-1]=="P":  
            ydr["start"]=85.0
            ydr["end"]=110.0
            yra.visible = False
            lines[-1].visible = False
        elif fieldIds[-1]=="W":  
            ydr["start"]=0.0
            ydr["end"]=200.0
            yra.visible = True
            lines[-1].visible = True
        else:
            ydr["start"]=-0.0
            ydr["end"]=0.0
            yra.visible = False
            lines[-1].visible = False
        #fig1.y_range=ydr

document["field"].bind("change", updateDataRanges)
updateDataRanges(None)

# show the plot
mydiv = document['graphs']
plt.show(fig1, mydiv.elt)

def UpdateFig1(theta0):
    global nx
    # generate the source data
    if nx<10:
        nx += 1
        xdr["end"]=nx
    delta = (360.0/nx)%360.0    
    yPeak = 0.5*(ydr["end"]- ydr["start"])
    yAvg = 0.5*(ydr["end"]+ ydr["start"])
    dt = [x * delta for x in range(nx+1)]
    dy = [ yAvg + yPeak * math.sin(math.radians(theta0+dTheta)) for dTheta in dt]
    #update the source data
    sources[-1].data.x = sources[0].data.x = list(range(nx+1)) 
    sources[0].data.y = dy
    sources[-1].data.y = [ theta0+dTheta for dTheta in dt ]
    sources[0].change.emit()
    sources[-1].change.emit()
    
#animation/timed updates
def TimerUpdate(o):
    global stopRequested
    global id
    global counter
    #
    if stopRequested:
        id = None
    else:
        now = datetime.now()
        elapsed = now - counter
        if elapsed.total_seconds()>=1.0:
            counter = now
            theta0 = UpdateTheta0(6.0) #6-degrees per second
            UpdateFig1(theta0)
        #
        # repeat if all went well
        id = raf(TimerUpdate)

def StartHandler(ev):
    global stopRequested
    global timerInstances
    global id
    #
    stopRequested = False
    if (timerInstances == 0) and (id is None):
        timerInstances = 1
        id = raf(TimerUpdate)

def StopHandler(ev):
    global stopRequested
    global timerInstances
    global id
    if not (id is None):
        caf(id)
        id = None
    if timerInstances>0:
        timerInstances -= 1
    stopRequested = True

    pickkey = ""

StartHandler(0)

# <!-- /script -->
