# <!-- script type="text/python" -->
from browser import document, window, aio
import time
import math
from datetime import datetime
import json
from browser import html
from browser import timer, aio
from browser.timer import request_animation_frame as raf
from browser.timer import cancel_animation_frame as caf

# 'importing' the Javascript libraries
Bokeh = window.Bokeh
plt = Bokeh.Plotting
leaflet = window.L
map = window.map

copyleft = {
    "maxZoom": 18,
    "attribution": 'Map data &copy; ' \
    '<a href="https://www.openstreetmap.org/">OpenStreetMap</a>' \
    ' contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>'
}

pageNum=0
pageSize=24

def updateMap(ev):
    global map
    
    sel = document["pageOfStations"]
    csvText = document["csv"].value
    featuredStations = [option.value for option in sel if option.selected and (int(option.value)>=0)]
    lines = [line for line in csvText.split("\n") if any([line.startswith(t+",") for t in featuredStations])]
    for id in featuredStations:
        reports= [ line.split(",") for line in lines if line.startswith(id+",")] 
        fields = [ report for report in reports if all([len(f)>0 for f in report])]
        if len(fields)>0:
            fields=fields[-1]
            latlonalt = [ float(fields[-2]), float(fields[-1]) ]
            map.setView(latlonalt) # optional third list element is altitude           
        else:
            window.alert("Incomplete data from station")

async def refreshPageSize():
    global pageSize,pageNum
    geoJSON = {}
    url2CanadianWeather = "https://geo.weather.gc.ca/geomet/features/collections/climate-stations/items?f=json&limit=10000&sortby=LONGITUDE%3AD%2CLATITUDE%3AA&startindex=0&COUNTRY=CAN&HAS_MONTHLY_SUMMARY=Y"

    request = await aio.get(url2CanadianWeather)#,format="application/json")
    geoJSON = json.loads(request.data)
    window.updateGeoJSON(json.dumps(geoJSON))   
    document["nextpage"].disabled=True
    document["formerpage"].disabled=True
    try:
        entries = len(geoJSON["features"])
        if entries>0:
            pages =  (entries+pageSize-1)//pageSize # double-slash is integer division
            holdPageNum = pageNum
            sel = html.SELECT(size=1, multiple=False)
            if (holdPageNum>=pages) or (holdPageNum<0):
                holdPageNum = pages-1
            else:
                document["nextpage"].disabled=False
            
            if holdPageNum>0:
                document["formerpage"].disabled=False

            chosen = choice = pageSize*holdPageNum

            language = "_en"
            item = ("Select a station:")
            option = html.OPTION(item)
            option.value = "-1"
            sel <= option
            csvText = ""
            for feature in geoJSON["features"][choice:choice+pageSize]:
                type = feature["type"]
                geometry = feature["geometry"]
                lonlat = [float(v) for v in geometry["coordinates"]]
                properties = feature["properties"]
                station = properties["STATION_NAME"]
                item = ("Station #%i: %s %05.2f N %06.2f W"%(chosen,station,lonlat[1],-lonlat[0])) 
                option = html.OPTION(item)
                option.value = "%i"%chosen
                sel <= option
                csvText += ",".join([
                    "%i"%chosen,
                    "%i"%properties.get("STN_ID", 0),
                    station,
                    geoJSON["timeStamp"], 
                    "%f"%lonlat[1],
                    "%f"%lonlat[0]
                ])
                csvText += "\n"
                chosen += 1
            document["csv"].value=csvText
            if "pageOfStations" in document:
                document["pageOfStations"].remove()
            sel.id=sel.name="pageOfStations"
            sel.bind("change", updateMap)
            document["stations"] <= sel
    except:
        pass

def updatePageSize(ev):
    global pageSize,pageNum
    pageSize = int(ev.target.value)
    aio.run(refreshPageSize())

def nextPage(ev):
    global pageSize,pageNum
    myPageNum = pageNum
    if pageSize>0 and "pageOfStations" in document:
        sel = document["pageOfStations"]
        myPageNum = int(min([int(option.value) for option in sel if (int(option.value)>=0)])/pageSize)

    pageNum = myPageNum + 1
    aio.run(refreshPageSize())

def formerPage(ev):
    global pageSize,pageNum
    myPageNum = pageNum
    if pageSize>0 and "pageOfStations" in document:
        sel = document["pageOfStations"]
        myPageNum = int(min([int(option.value) for option in sel if (int(option.value)>=0)])/pageSize)
    
    if myPageNum>0:
        pageNum = myPageNum - 1
        aio.run(refreshPageSize())

def firstPage(ev):
    global pageSize,pageNum
    pageNum = 0
    aio.run(refreshPageSize())

def lastPage(ev):
    global pageSize,pageNum
    pageNum = -1
    aio.run(refreshPageSize())

document["pagesize"].bind("change", updatePageSize)
document["nextpage"].bind("click", nextPage)
document["formerpage"].bind("click", formerPage)
document["firstpage"].bind("click", firstPage)
document["lastpage"].bind("click", lastPage)

async def updateTicker():    
    sel = document["pageOfStations"]
    csvText = document["csv"].value
    featuredStations = [option.value for option in sel if option.selected and (int(option.value)>=0)]
    lines = [line for line in csvText.split("\n") if any([line.startswith(t+",") for t in featuredStations])]
    llas = []
    for id in featuredStations:
        reports= [ line.split(",") for line in lines if line.startswith(id+",")] 
        fields = [ report for report in reports if all([len(f)>0 for f in report])]
        if len(fields)>0:
            fields=fields[-1]
            llas += [ [float(fields[-2]), float(fields[-1])] ]

    if len(llas)>0:
        sel = document["pageOfDatasets"]
        featuredDatasets = [option.value for option in sel if option.selected and len(option.value)>0]
        datasets = []
        for dataset in featuredDatasets:
            request = await aio.get("https://www.ncei.noaa.gov/erddap/info/%s/index.json"%dataset)
            try:
                geoJSON = json.loads(request.data)
                table=geoJSON["table"]
                for row in table["rows"]:
                    if row[2]=="geospatial_lat_max" and lla[0]>float(row[-1]):
                        break
                    if row[2]=="geospatial_lat_min" and lla[0]<float(row[-1]):
                        break
                    if row[2]=="geospatial_lon_max" and lla[1]>float(row[-1]):
                        break
                    if row[2]=="geospatial_lon_min" and lla[1]<float(row[-1]):
                        break
                    datasets += [dataset]
            except:
                pass

        lines=[]
        for dataset in datasets:
            request = await aio.get("https://www.ncei.noaa.gov/erddap/griddap/%s.json?latitude[(%f):1:(%f)],longitude[(%f):1:(%f)]"%(dataset,llas[0]-1.0,llas[0]+1.0,llas[1]-1.0,llas[1]+1.0))
            try:
                geoJSON = json.loads(request.data)
                lines += [dataset]
            except:
                pass

        document["ticker"].innerHTML="\n".join(lines)
    
async def updateDatasets():
    geoJSON = {}
    
    request = await aio.get("https://www.ncei.noaa.gov/erddap/categorize/institution/index.json?page=1&itemsPerPage=50")
    geoJSON = json.loads(request.data)

    institutions=[]
    try:
        table=geoJSON["table"]
        institutions += [row[0] for row in table["rows"] if len(row)>0]
    except:
        pass
        
    rows=[]
    for institution in institutions:
        request = await aio.get("https://www.ncei.noaa.gov/erddap/categorize/institution/%s/index.json?page=1&itemsPerPage=50"%institution)
        geoJSON = json.loads(request.data)
        try:
            table=geoJSON["table"]
            rows += [row for row in table["rows"] if row[0].endswith("_by_time_lat_lon")]
        except:
            pass
            
    if len(rows):
        sel = html.SELECT(size=8, multiple=True)
        item = ("Select datasets:")
        option = html.OPTION(item)
        option.value = ""
        sel <= option
        chosen = 0
        for row in rows:
            dataset = row[-1]
            option = html.OPTION(dataset)
            option.value = dataset
            option.selected = 1
            sel <= option
            chosen += 1
        if "pageOfDatasets" in document:
            document["pageOfDatasets"].remove()
        sel.id=sel.name="pageOfDatasets"
        document["datasets"] <= sel

stationsPending=False;
datasetsPending=False;
def Every5s():
    global stationsPending;
    global datasetsPending;
    if ("pageOfStations" in document):
        stationsPending=False
        if ("pageOfDatasets" in document):
            datasetsPending=False
            aio.run(updateTicker())
        elif not datasetsPending:
            datasetsPending=True
            aio.run(updateDatasets())            
    elif not stationsPending:
        stationsPending=True
        aio.run(refreshPageSize())

    timer.set_timeout(Every5s, 5000)

timer.set_timeout(Every5s, 0)

#animation/timed updates

# <!-- /script -->
